{
  "key": "systemAbstraction",
  "value": {
    "designRules": "1. カラーパレット:\n   - プライマリカラー: #4A90E2 (青)\n   - セカンダリカラー: #50E3C2 (ターコイズ)\n   - アクセントカラー: #F5A623 (オレンジ)\n   - バックグラウンド: #F8F8F8 (薄いグレー)\n   - テキスト: #333333 (濃いグレー)\n\n2. タイポグラフィ:\n   - 見出し: Roboto Bold 24px\n   - 本文: Noto Sans JP Regular 16px\n   - ボタンテキスト: Roboto Medium 14px\n\n3. レイアウト:\n   - グリッドシステムを使用し 一貫性のあるレイアウトを維持\n   - 余白は8の倍数を基本とする (8px 16px 24px等)\n\n4. アイコン:\n   - Material Design Iconsを使用\n   - サイズは24pxを基本とし コンテキストに応じて調整\n\n5. ボタン:\n   - 角丸の長方形デザイン (border-radius: 4px)\n   - ホバー時は明るさを10%落とす\n   - アクティブ状態は明るさを20%落とす\n\n6. フォーム要素:\n   - 入力フィールドは下線スタイルを使用\n   - フォーカス時は下線の色をプライマリカラーに変更\n\n7. アニメーション:\n   - トランジションは0.3秒のイーズアウトを基本とする\n   - 過度なアニメーションは避け 機能性を重視",
    "codingRules": "1. 命名規則:\n   - クラス名: パスカルケース (例: UserManager)\n   - メソッド名: キャメルケース (例: getUserInfo)\n   - 変数名: キャメルケース (例: userAge)\n   - 定数名: 大文字のスネークケース (例: MAX_USER_COUNT)\n\n2. インデント:\n   - スペース4つを使用\n   - ネストレベルごとにインデントを1つ増やす\n\n3. コードの可読性:\n   - 関数は単一責任の原則に従う\n   - コメントは必要最小限にし 自己説明的なコードを目指す\n   - 複雑なロジックには簡潔な説明コメントを付ける\n\n4. エラーハンドリング:\n   - 例外は適切にキャッチし ログに記録\n   - ユーザーに分かりやすいエラーメッセージを表示\n   - 重要なエラーは管理者に通知する仕組みを実装\n\n5. コード構造:\n   - 関連する機能ごとにモジュール化\n   - 循環参照を避ける\n   - インターフェースを活用し 依存性を低くする",
    "systemAbstraction": "GEAR.indigoはAI駆動の開発支援ツールで テキストやPDFファイルから開発ドキュメントとソースコードを自動生成します。主な機能には以下があります:\n\n1. テキスト/PDFアップロード: ユーザーが入力ファイルをアップロード\n2. 開発ドキュメント自動生成: 入力内容を分析しドキュメントを作成\n3. ソースコード自動生成: ドキュメントを基にコードを生成\n4. 生成結果表示: ドキュメントとコードをユーザーに表示\n5. 自動品質チェック: 生成物の品質を自動評価\n6. 段階的ドキュメント生成: 各開発工程のドキュメントを順次作成\n7. 提案資料自動作成: クライアント向け資料を自動生成\n8. ドキュメント整合性チェック: 各工程間の一貫性を確認\n9. 自動工数見積: 開発工数を自動計算\n10. 進捗レポート生成: プロジェクトの進捗状況を自動集計\n\nこのシステムにより 開発プロセスの効率化 工数削減 品質向上が期待できます。"
  }
}
