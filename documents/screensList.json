{
  "key": "screensList",
  "value": [
    {
      "component": "ログインフォーム（メールアドレス パスワード） ログインボタン パスワードリセットリンク",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "operatingProcedure": "1. メールアドレスを入力\n2. パスワードを入力\n3. ログインボタンをクリック\n4. 認証成功時はダッシュボードへ遷移 失敗時はエラーメッセージを表示",
      "description": "ユーザーがシステムにログインするための画面",
      "id": "SCR-001",
      "screenName": "ログイン画面",
      "category": "認証",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "auth.ts",
          "handleProcedure": "1. クライアントから受け取ったメールアドレスとパスワードを検証\n2. データベースでユーザー情報を確認\n3. パスワードのハッシュを比較\n4. 認証成功時にJWTトークンを生成\n5. 生成したトークンをクライアントに返す",
          "relatedScreen": "SCR-001",
          "handleName": "ユーザー認証",
          "description": "ユーザーのログイン認証を処理し JWTトークンを発行する",
          "id": "BAC-001",
          "category": "認証",
          "relatedFrontendCode": "typescript\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport supabase from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { AiOutlineMail, AiOutlineLock } from 'react-icons/ai';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n\n    if (error) {\n      setError('ログインに失敗しました。メールアドレスとパスワードをご確認ください。');\n      setLoading(false);\n    } else {\n      router.push('/dashboard');\n    }\n  };\n\n  const handlePasswordReset = async () => {\n    if (!email) {\n      setError('パスワードリセットにはメールアドレスが必要です。');\n      return;\n    }\n    setLoading(true);\n    setError('');\n\n    const { data, error } = await supabase.auth.resetPasswordForEmail(email);\n\n    if (error) {\n      setError('パスワードリセットのリクエストに失敗しました。');\n    } else {\n      setError('パスワードリセット用のリンクをメールに送信しました。');\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen h-full flex flex-col\">\n      <Topbar />\n      <div className=\"flex flex-1\">\n        <div\n          className=\"hidden md:block w-1/2 bg-cover bg-center\"\n          style={{ backgroundImage: \"url('https://placehold.co/600x800?text=Login+Image')\" }}\n        ></div>\n        <div className=\"w-full md:w-1/2 flex items-center justify-center bg-gray-100\">\n          <div className=\"max-w-md w-full bg-white p-8 rounded shadow-lg\">\n            <h2 className=\"text-2xl font-bold text-center mb-6\">ログイン</h2>\n            {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\n            <form onSubmit={handleLogin}>\n              <div className=\"mb-4\">\n                <label htmlFor=\"email\" className=\"block text-gray-700 mb-2\">\n                  メールアドレス\n                </label>\n                <div className=\"flex items-center border-b-2 border-gray-300 focus-within:border-blue-500\">\n                  <AiOutlineMail className=\"text-gray-500 mr-2\" size={24} />\n                  <input\n                    type=\"email\"\n                    id=\"email\"\n                    className=\"w-full p-2 outline-none\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"you@example.com\"\n                  />\n                </div>\n              </div>\n              <div className=\"mb-6\">\n                <label htmlFor=\"password\" className=\"block text-gray-700 mb-2\">\n                  パスワード\n                </label>\n                <div className=\"flex items-center border-b-2 border-gray-300 focus-within:border-blue-500\">\n                  <AiOutlineLock className=\"text-gray-500 mr-2\" size={24} />\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    className=\"w-full p-2 outline-none\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"********\"\n                  />\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition duration-300\"\n                disabled={loading}\n              >\n                {loading ? 'ログイン中...' : 'ログイン'}\n              </button>\n            </form>\n            <div className=\"mt-4 text-center\">\n              <button\n                className=\"text-blue-500 hover:underline\"\n                onClick={handlePasswordReset}\n                disabled={loading}\n              >\n                パスワードをお忘れですか？\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
        }
      ]
    },
    {
      "component": "プロジェクト一覧 新規プロジェクト作成ボタン 各機能へのクイックアクセスリンク",
      "accessRight": "ログインユーザー",
      "fileName": "dashboard.tsx",
      "operatingProcedure": "1. プロジェクト一覧から既存プロジェクトを選択\n2. 新規プロジェクト作成ボタンをクリックして新規作成\n3. クイックアクセスリンクから各機能画面へ遷移",
      "description": "ユーザーのプロジェクト概要と主要機能へのアクセスを提供する画面",
      "id": "SCR-002",
      "screenName": "ダッシュボード",
      "category": "メイン",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ファイル選択ボタン ドラッグ&ドロップエリア アップロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "file-upload.tsx",
      "operatingProcedure": "1. ファイル選択ボタンをクリックしてファイルを選択またはドラッグ&ドロップでファイルを指定\n2. アップロードボタンをクリックしてファイルをアップロード\n3. アップロード完了後 ドキュメント生成画面へ自動遷移",
      "description": "テキストファイルまたはPDFファイルをアップロードする画面",
      "id": "SCR-003",
      "screenName": "ファイルアップロード画面",
      "category": "入力",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "file-upload.ts",
          "handleProcedure": "1. マルチパートフォームデータを解析\n2. ファイルの種類とサイズを検証\n3. 一時的なストレージにファイルを保存\n4. 保存されたファイルのパスをデータベースに記録\n5. ファイルの保存場所情報をクライアントに返す",
          "relatedScreen": "SCR-003",
          "handleName": "ファイルアップロード処理",
          "description": "クライアントからアップロードされたファイルを受け取り 一時保存する",
          "id": "BAC-002",
          "category": "ファイル処理",
          "relatedFrontendCode": "tsx\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { Session } from '@supabase/supabase-js';\nimport { AiOutlineUpload } from 'react-icons/ai';\nimport axios from 'axios';\n\nconst FileUpload: React.FC = () => {\n  const router = useRouter();\n  const [session, setSession] = useState<Session | null>(null);\n\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getSession = async () => {\n      const { data } = await supabase.auth.getSession();\n      if (data.session) {\n        setSession(data.session);\n      } else {\n        router.push('/login');\n      }\n    };\n\n    getSession();\n  }, [router]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setError(null);\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      if (!['application/pdf', 'text/plain'].includes(selectedFile.type)) {\n        setError('テキストまたはPDFファイルを選択してください。');\n        return;\n      }\n      setFile(selectedFile);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setError(null);\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const selectedFile = e.dataTransfer.files[0];\n      if (!['application/pdf', 'text/plain'].includes(selectedFile.type)) {\n        setError('テキストまたはPDFファイルを選択してください。');\n        return;\n      }\n      setFile(selectedFile);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) {\n      setError('ファイルを選択してください。');\n      return;\n    }\n\n    try {\n      setUploading(true);\n\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('user_id', session?.user.id || '');\n\n      const response = await axios.post('/api/file-upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      router.push('/document-generation');\n    } catch (error) {\n      setError('ファイルのアップロードに失敗しました。');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  if (!session) {\n    return null; // セッションチェック中は何も表示しない\n  }\n\n  return (\n    <div className=\"min-h-screen h-full flex flex-col\">\n      <Topbar />\n      <div className=\"flex flex-col items-center justify-center flex-grow bg-gray-100 p-8\">\n        <h1 className=\"text-2xl font-bold mb-4\">ファイルアップロード</h1>\n        <div\n          className=\"w-full max-w-md h-48 flex flex-col items-center justify-center border-4 border-dashed border-gray-400 bg-white cursor-pointer\"\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          onClick={() => document.getElementById('fileInput')?.click()}\n        >\n          {file ? (\n            <p>{file.name}</p>\n          ) : (\n            <>\n              <AiOutlineUpload className=\"text-gray-400 text-6xl mb-2\" />\n              <p className=\"text-gray-500\">ここにファイルをドラッグ＆ドロップ、またはクリックしてファイルを選択</p>\n            </>\n          )}\n        </div>\n        <input\n          type=\"file\"\n          accept=\".txt, .pdf\"\n          id=\"fileInput\"\n          onChange={handleFileChange}\n          className=\"hidden\"\n        />\n        <button\n          onClick={handleUpload}\n          disabled={uploading}\n          className={`mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 ${\n            uploading ? 'opacity-50 cursor-not-allowed' : ''\n          }`}\n        >\n          {uploading ? 'アップロード中...' : 'アップロード'}\n        </button>\n        {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;"
        }
      ]
    },
    {
      "component": "生成オプション選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "document-generation.tsx",
      "operatingProcedure": "1. 生成するドキュメントの種類を選択\n2. 生成開始ボタンをクリック\n3. 生成進捗をリアルタイムで表示\n4. 生成完了後 ドキュメント表示画面へ自動遷移",
      "description": "アップロードしたファイルから開発ドキュメントを生成する画面",
      "id": "SCR-004",
      "screenName": "ドキュメント生成画面",
      "category": "生成",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "document-generation.ts",
          "handleProcedure": "1. データベースから対象ファイルの情報を取得\n2. ファイルの内容を読み込み\n3. AIモデルにファイル内容を入力し ドキュメントを生成\n4. 生成されたドキュメントをフォーマット\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-004",
          "handleName": "ドキュメント生成",
          "description": "アップロードされたファイルの内容を分析し AIを使用して開発ドキュメントを生成する",
          "id": "BAC-003",
          "category": "AI処理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport supabase from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport axios from 'axios';\nimport { FaSpinner } from 'react-icons/fa';\n\nconst DocumentGeneration = () => {\n  const [session, setSession] = useState(null);\n  const router = useRouter();\n\n  const [documentType, setDocumentType] = useState('');\n  const documentTypes = ['要件定義', 'システム設計', '開発', 'テスト', '提案資料'];\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const getSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        router.push('/login');\n      } else {\n        setSession(session);\n      }\n    };\n    getSession();\n  }, []);\n\n  if (!session) {\n    return (\n      <div className=\"min-h-screen h-full flex items-center justify-center\">\n        <FaSpinner className=\"animate-spin text-gray-500 text-4xl\" />\n      </div>\n    );\n  }\n\n  const handleStartGeneration = async () => {\n    if (!documentType) return;\n    setIsGenerating(true);\n    setProgress(0);\n\n    try {\n      // ドキュメント生成の開始\n      const response = await axios.post('/api/document-generation', {\n        documentType,\n        projectId: 'sample-project-id',\n      });\n      const { generationId } = response.data;\n\n      // 進捗状況のポーリング\n      const interval = setInterval(async () => {\n        try {\n          const statusResponse = await axios.get(`/api/document-generation/status/${generationId}`);\n          const { progress: currentProgress, completed, documentId } = statusResponse.data;\n          setProgress(currentProgress);\n\n          if (completed) {\n            clearInterval(interval);\n            setIsGenerating(false);\n            // ドキュメント表示画面へ自動遷移\n            router.push(`/document-display?documentId=${documentId}`);\n          }\n        } catch (error) {\n          console.error('進捗の取得に失敗しました。', error);\n          setIsGenerating(false);\n          clearInterval(interval);\n        }\n      }, 2000); // 2秒ごとにポーリング\n    } catch (error) {\n      console.error('ドキュメントの生成に失敗しました。', error);\n      setIsGenerating(false);\n\n      // サンプルデータを表示（エラー処理）\n      // ここでは生成完了として処理し、サンプルのdocumentIdを使用して遷移\n      router.push(`/document-display?documentId=sample-document-id`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <Topbar />\n      <div className=\"max-w-4xl mx-auto p-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">ドキュメント生成</h1>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 mb-2\">生成するドキュメントの種類を選択してください</label>\n          <select\n            className=\"w-full border border-gray-300 rounded-lg px-3 py-2\"\n            value={documentType}\n            onChange={(e) => setDocumentType(e.target.value)}\n          >\n            <option value=\"\">選択してください</option>\n            {documentTypes.map((type) => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n        </div>\n        <button\n          className={`w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 ${(!documentType || isGenerating) && 'opacity-50 cursor-not-allowed'}`}\n          onClick={handleStartGeneration}\n          disabled={!documentType || isGenerating}\n        >\n          {isGenerating ? (\n            <div className=\"flex items-center justify-center\">\n              <FaSpinner className=\"animate-spin mr-2\" />\n              生成中...\n            </div>\n          ) : (\n            '生成開始'\n          )}\n        </button>\n        {isGenerating && (\n          <div className=\"mt-6\">\n            <p className=\"text-gray-700 mb-2\">生成進捗：</p>\n            <div className=\"w-full bg-gray-200 rounded-full h-4\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-gray-700 mt-2\">{progress}% 完了</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentGeneration;"
        }
      ]
    },
    {
      "component": "生成対象選択 プログラミング言語選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "code-generation.tsx",
      "operatingProcedure": "1. 生成対象のドキュメントを選択\n2. 生成するプログラミング言語を選択\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 ソースコード表示画面へ自動遷移",
      "description": "生成された開発ドキュメントからソースコードを生成する画面",
      "id": "SCR-005",
      "screenName": "ソースコード生成画面",
      "category": "生成",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "code-generation.ts",
          "handleProcedure": "1. データベースから対象ドキュメントの情報を取得\n2. ドキュメントの内容を解析\n3. AIモデルにドキュメント内容を入力し ソースコードを生成\n4. 生成されたコードをフォーマットおよび最適化\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-005",
          "handleName": "ソースコード生成",
          "description": "生成された開発ドキュメントを基に AIを使用してソースコードを生成する",
          "id": "BAC-004",
          "category": "AI処理",
          "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport Topbar from '@/components/Topbar';\nimport supabase from '@/supabase';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { FaPlay, FaHome, FaFileAlt, FaCode } from 'react-icons/fa';\n\nconst Sidebar: React.FC = () => {\n    return (\n        <div className=\"w-64 bg-white border-r min-h-screen\">\n            <nav className=\"mt-10\">\n                <a href=\"/dashboard\" className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-gray-200\">\n                    <FaHome className=\"mr-2\" />\n                    ダッシュボード\n                </a>\n                <a href=\"/code-generation\" className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-gray-200\">\n                    <FaCode className=\"mr-2\" />\n                    ソースコード生成\n                </a>\n                <a href=\"/document-generation\" className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-gray-200\">\n                    <FaFileAlt className=\"mr-2\" />\n                    ドキュメント生成\n                </a>\n            </nav>\n        </div>\n    );\n};\n\nconst CodeGeneration: React.FC = () => {\n    const [documents, setDocuments] = useState<any[]>([]);\n    const [selectedDocumentId, setSelectedDocumentId] = useState<string>('');\n    const [languages] = useState<string[]>(['Python', 'JavaScript', 'TypeScript', 'Java']);\n    const [selectedLanguage, setSelectedLanguage] = useState<string>('');\n    const [isGenerating, setIsGenerating] = useState<boolean>(false);\n    const [progress, setProgress] = useState<number>(0);\n    const router = useRouter();\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            const { data: { user } } = await supabase.auth.getUser();\n            if (!user) {\n                router.push('/login');\n            }\n        };\n\n        const fetchDocuments = async () => {\n            let { data, error } = await supabase.from('documents').select('*');\n            if (error || !data) {\n                console.error('ドキュメントの取得に失敗しました', error);\n                setDocuments([\n                    { id: '1', content: { title: '要件定義書' } },\n                    { id: '2', content: { title: 'システム設計書' } },\n                ]);\n            } else {\n                setDocuments(data);\n            }\n        };\n\n        checkAuth();\n        fetchDocuments();\n    }, [router]);\n\n    const handleGenerate = async () => {\n        setIsGenerating(true);\n        setProgress(0);\n\n        try {\n            const response = await axios.post('/api/code-generation', {\n                documentId: selectedDocumentId,\n                language: selectedLanguage,\n            });\n\n            const { generationId } = response.data;\n\n            const interval = setInterval(async () => {\n                try {\n                    const progressResponse = await axios.get(`/api/code-generation/${generationId}/progress`);\n                    const { progress } = progressResponse.data;\n                    setProgress(progress);\n\n                    if (progress >= 100) {\n                        clearInterval(interval);\n                        router.push('/source-code-display');\n                    }\n                } catch (error) {\n                    console.error('進捗の取得に失敗しました', error);\n                    clearInterval(interval);\n                    setIsGenerating(false);\n                }\n            }, 2000);\n        } catch (error) {\n            console.error('生成の開始に失敗しました', error);\n            setIsGenerating(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full\">\n            <Topbar />\n            <div className=\"flex\">\n                <Sidebar />\n                <div className=\"flex-1 container mx-auto py-8\">\n                    <img src=\"https://placehold.co/600x200?text=ソースコード生成\" alt=\"ソースコード生成\" className=\"w-full mb-4\" />\n                    <h1 className=\"text-2xl font-bold mb-4\">ソースコード生成</h1>\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">生成対象のドキュメントを選択</label>\n                        <div className=\"relative\">\n                            <select\n                                value={selectedDocumentId}\n                                onChange={(e) => setSelectedDocumentId(e.target.value)}\n                                className=\"appearance-none w-full bg-white border-b-2 border-gray-400 text-gray-700 py-2 px-4 leading-tight focus:outline-none focus:border-blue-500\"\n                            >\n                                <option value=\"\">ドキュメントを選択してください</option>\n                                {documents.map((doc) => (\n                                    <option key={doc.id} value={doc.id}>\n                                        {doc.content.title || 'ドキュメント'}\n                                    </option>\n                                ))}\n                            </select>\n                            <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                ▼\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">生成するプログラミング言語を選択</label>\n                        <div className=\"relative\">\n                            <select\n                                value={selectedLanguage}\n                                onChange={(e) => setSelectedLanguage(e.target.value)}\n                                className=\"appearance-none w-full bg-white border-b-2 border-gray-400 text-gray-700 py-2 px-4 leading-tight focus:outline-none focus:border-blue-500\"\n                            >\n                                <option value=\"\">プログラミング言語を選択してください</option>\n                                {languages.map((lang, index) => (\n                                    <option key={index} value={lang}>\n                                        {lang}\n                                    </option>\n                                ))}\n                            </select>\n                            <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                ▼\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                        <button\n                            onClick={handleGenerate}\n                            disabled={isGenerating || !selectedDocumentId || !selectedLanguage}\n                            className={`bg-blue-500 text-white font-medium py-2 px-4 rounded focus:outline-none inline-flex items-center ${isGenerating || !selectedDocumentId || !selectedLanguage ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'}`}\n                        >\n                            <FaPlay className=\"mr-2\" />\n                            生成開始\n                        </button>\n                    </div>\n\n                    {isGenerating && (\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 text-sm font-bold mb-2\">生成進捗</label>\n                            <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                <div\n                                    className=\"bg-blue-500 h-4 rounded-full\"\n                                    style={{ width: `${progress}%` }}\n                                ></div>\n                            </div>\n                            <p className=\"text-center mt-2\">{progress}%</p>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CodeGeneration;"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントまたはソースコードを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 品質チェック結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードの品質を自動チェックする画面",
      "id": "SCR-006",
      "screenName": "品質チェック画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "quality-check.ts",
          "handleProcedure": "1. データベースから対象ドキュメントとコードを取得\n2. ドキュメントの一貫性と完全性をチェック\n3. コードの構文エラーおよびベストプラクティス違反をチェック\n4. チェック結果をスコア化\n5. 詳細な問題点と改善提案を生成\n6. チェック結果をデータベースに保存\n7. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-006",
          "handleName": "自動品質チェック",
          "description": "生成されたドキュメントとソースコードの品質を自動でチェックする",
          "id": "BAC-005",
          "category": "品質管理",
          "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { FaFileAlt, FaCode } from 'react-icons/fa';\n\nconst QualityCheck = () => {\n  const router = useRouter();\n  const [documents, setDocuments] = useState<any[]>([]);\n  const [sourceCodes, setSourceCodes] = useState<any[]>([]);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [isChecking, setIsChecking] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    // ドキュメントとソースコードを取得\n    const fetchData = async () => {\n      const user = supabase.auth.user();\n      if (user) {\n        // プロジェクトを取得\n        const { data: projects, error: projectError } = await supabase\n          .from('projects')\n          .select('id, name')\n          .eq('created_by', user.id);\n\n        if (projectError) {\n          console.error('プロジェクトの取得に失敗しました', projectError);\n          return;\n        }\n\n        const projectIds = projects.map((project: any) => project.id);\n\n        // ドキュメントを取得\n        const { data: docs, error: docError } = await supabase\n          .from('documents')\n          .select('id, type')\n          .in('project_id', projectIds);\n\n        if (docError) {\n          console.error('ドキュメントの取得に失敗しました', docError);\n        } else {\n          setDocuments(docs);\n        }\n\n        // ソースコードを取得\n        const { data: codes, error: codeError } = await supabase\n          .from('source_codes')\n          .select('id, file_name')\n          .in('project_id', projectIds);\n\n        if (codeError) {\n          console.error('ソースコードの取得に失敗しました', codeError);\n        } else {\n          setSourceCodes(codes);\n        }\n      } else {\n        router.push('/login');\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleSelectItem = (id: string) => {\n    setSelectedItems((prevSelected) => {\n      if (prevSelected.includes(id)) {\n        return prevSelected.filter((itemId) => itemId !== id);\n      } else {\n        return [...prevSelected, id];\n      }\n    });\n  };\n\n  const startCheck = async () => {\n    setIsChecking(true);\n    setProgress(0);\n\n    // チェック進捗をシミュレート\n    const interval = setInterval(() => {\n      setProgress((prevProgress) => {\n        if (prevProgress >= 100) {\n          clearInterval(interval);\n          // チェック完了後、結果画面へ遷移\n          router.push('/quality-check-result');\n          return 100;\n        } else {\n          return prevProgress + 10;\n        }\n      });\n    }, 500);\n\n    // 実際の品質チェック処理を開始\n    // 選択されたアイテムのIDをバックエンドに送信\n    try {\n      const { data, error } = await supabase\n        .from('quality_checks')\n        .insert([\n          {\n            project_id: selectedItems[0], // 簡略化のため、最初のアイテムのみ使用\n            type: 'ドキュメント', // ここでは仮にドキュメントをチェック\n            result: {}, // チェック結果はバックエンドで処理\n          },\n        ]);\n\n      if (error) {\n        console.error('品質チェックの開始に失敗しました', error);\n      } else {\n        console.log('品質チェックを開始しました', data);\n      }\n    } catch (error) {\n      console.error('品質チェック中にエラーが発生しました', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <Topbar />\n      <div className=\"max-w-4xl mx-auto py-8 px-4\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">品質チェック画面</h1>\n        <div className=\"mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">チェック対象選択</h2>\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2 flex items-center\">\n              <FaFileAlt className=\"mr-2 text-blue-500\" /> ドキュメント\n            </h3>\n            {documents.length > 0 ? (\n              <ul className=\"mb-4\">\n                {documents.map((doc) => (\n                  <li key={doc.id} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id={`doc-${doc.id}`}\n                      className=\"mr-2\"\n                      checked={selectedItems.includes(doc.id)}\n                      onChange={() => handleSelectItem(doc.id)}\n                    />\n                    <label htmlFor={`doc-${doc.id}`} className=\"text-gray-700\">\n                      {doc.type}（ID: {doc.id}）\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-500 mb-4\">ドキュメントがありません。</p>\n            )}\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2 flex items-center\">\n              <FaCode className=\"mr-2 text-green-500\" /> ソースコード\n            </h3>\n            {sourceCodes.length > 0 ? (\n              <ul>\n                {sourceCodes.map((code) => (\n                  <li key={code.id} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id={`code-${code.id}`}\n                      className=\"mr-2\"\n                      checked={selectedItems.includes(code.id)}\n                      onChange={() => handleSelectItem(code.id)}\n                    />\n                    <label htmlFor={`code-${code.id}`} className=\"text-gray-700\">\n                      {code.file_name}（ID: {code.id}）\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-500\">ソースコードがありません。</p>\n            )}\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <button\n            onClick={startCheck}\n            disabled={selectedItems.length === 0 || isChecking}\n            className=\"bg-blue-500 text-white px-6 py-3 rounded-md font-semibold hover:bg-blue-600 disabled:bg-gray-300\"\n          >\n            チェック開始\n          </button>\n        </div>\n        {isChecking && (\n          <div className=\"mt-8\">\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">チェック進捗</h2>\n            <div className=\"w-full bg-gray-200 rounded-full h-4\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-gray-700 mt-2\">{progress}% 完了</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default QualityCheck;"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 整合性確認結果画面へ自動遷移",
      "description": "各工程間のドキュメントの整合性を自動でチェックする画面",
      "id": "SCR-007",
      "screenName": "整合性確認画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "consistency-check.ts",
          "handleProcedure": "1. データベースから関連するすべてのドキュメントを取得\n2. ドキュメント間の関連性を分析\n3. キーワードと概念の一貫性をチェック\n4. 要件とデザインの追跡可能性を確認\n5. 不整合箇所を特定し リスト化\n6. 整合性スコアを計算\n7. チェック結果と修正提案をデータベースに保存\n8. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-007",
          "handleName": "ドキュメント整合性チェック",
          "description": "各工程間のドキュメントの整合性を自動でチェックし確保する",
          "id": "BAC-006",
          "category": "品質管理",
          "relatedFrontendCode": "typescript\nimport { useState, useEffect } from 'react';\nimport Topbar from '@/components/Topbar';\nimport { useRouter } from 'next/router';\nimport supabase from '@/supabase';\nimport { AiOutlineFileText } from 'react-icons/ai';\n\ninterface Document {\n  id: string;\n  project_id: string;\n  type: string;\n  content: any;\n  created_at: string;\n  updated_at: string;\n}\n\nconst ConsistencyCheck = () => {\n  const router = useRouter();\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);\n  const [isChecking, setIsChecking] = useState(false);\n  const [progress, setProgress] = useState<number>(0);\n  const [userId, setUserId] = useState<string>('');\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        setUserId(session.user.id);\n      } else {\n        router.push('/login');\n      }\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchDocuments = async () => {\n      if (userId) {\n        const { data: docs, error } = await supabase\n          .from('documents')\n          .select('*')\n          .order('created_at', { ascending: false });\n        if (docs) {\n          setDocuments(docs);\n        } else {\n          console.error(error);\n        }\n      }\n    };\n    fetchDocuments();\n  }, [userId]);\n\n  const handleDocumentSelect = (id: string) => {\n    if (selectedDocuments.includes(id)) {\n      setSelectedDocuments(selectedDocuments.filter((docId) => docId !== id));\n    } else {\n      setSelectedDocuments([...selectedDocuments, id]);\n    }\n  };\n\n  const handleStartCheck = async () => {\n    setIsChecking(true);\n    setProgress(0);\n    // チェック進捗をシミュレート\n    const interval = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsChecking(false);\n          router.push('/consistency-check-result');\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 500);\n\n    // バックエンドにチェック開始リクエストを送信\n    try {\n      const { error } = await supabase\n        .rpc('start_consistency_check', { document_ids: selectedDocuments });\n      if (error) {\n        console.error(error);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto py-8\">\n        <h1 className=\"text-2xl font-bold mb-4 text-gray-800\">整合性確認画面</h1>\n\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック対象ドキュメント選択</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {documents.map((doc) => (\n              <div\n                key={doc.id}\n                className={`flex items-center p-4 border rounded-lg cursor-pointer ${\n                  selectedDocuments.includes(doc.id) ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n                }`}\n                onClick={() => handleDocumentSelect(doc.id)}\n              >\n                <AiOutlineFileText className=\"text-2xl text-gray-600 mr-3\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-800 font-medium\">{doc.type}</p>\n                  <p className=\"text-gray-500 text-sm\">{new Date(doc.created_at).toLocaleString('ja-JP')}</p>\n                </div>\n                {selectedDocuments.includes(doc.id) && (\n                  <span className=\"text-blue-500 font-semibold\">選択済み</span>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <button\n            className=\"mt-6 w-full md:w-auto bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition duration-300 disabled:opacity-50\"\n            onClick={handleStartCheck}\n            disabled={isChecking || selectedDocuments.length === 0}\n          >\n            チェック開始\n          </button>\n\n          {isChecking && (\n            <div className=\"mt-6\">\n              <h2 className=\"text-lg font-medium text-gray-700 mb-2\">チェック進捗</h2>\n              <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                <div\n                  className=\"bg-blue-600 h-4 rounded-full\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-gray-600 mt-2\">{progress}% 完了</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConsistencyCheck;"
        }
      ]
    },
    {
      "component": "見積対象選択 見積開始ボタン 見積進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation.tsx",
      "operatingProcedure": "1. 見積対象のプロジェクトを選択\n2. 見積開始ボタンをクリック\n3. 見積進捗をリアルタイムで表示\n4. 見積完了後 工数見積結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる画面",
      "id": "SCR-008",
      "screenName": "工数見積画面",
      "category": "プロジェクト管理",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "work-estimation.ts",
          "handleProcedure": "1. データベースからプロジェクト関連のすべての成果物を取得\n2. ドキュメントの量と複雑さを分析\n3. コードの行数と複雑度を計算\n4. 過去のプロジェクトデータと比較\n5. AIモデルを使用して各フェーズの工数を予測\n6. 総工数と内訳を計算\n7. 見積結果をデータベースに保存\n8. 見積サマリーをクライアントに送信",
          "relatedScreen": "SCR-008",
          "handleName": "自動工数見積",
          "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる",
          "id": "BAC-007",
          "category": "プロジェクト管理",
          "relatedFrontendCode": "tsx\nimport React, { useEffect, useState } from 'react';\nimport Topbar from '@/components/Topbar';\nimport supabase from '@/supabase';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { FiPlay } from 'react-icons/fi';\n\ninterface Project {\n  id: string;\n  name: string;\n}\n\nexport default function WorkEstimation() {\n  const [user, setUser] = useState<any>(null);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [selectedProjectId, setSelectedProjectId] = useState('');\n  const [isEstimating, setIsEstimating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const router = useRouter();\n\n  useEffect(() => {\n    const getSession = async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (session && session.user) {\n        setUser(session.user);\n      } else {\n        router.push('/login');\n      }\n    };\n    getSession();\n  }, []);\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      const { data, error } = await supabase\n        .from('projects')\n        .select('*')\n        .eq('created_by', user.id);\n      if (error) {\n        console.error(error);\n        // サンプルデータを表示\n        setProjects([\n          { id: '1', name: 'サンプルプロジェクト1' },\n          { id: '2', name: 'サンプルプロジェクト2' },\n        ]);\n      } else {\n        setProjects(data);\n      }\n    };\n    if (user) {\n      fetchProjects();\n    }\n  }, [user]);\n\n  const startEstimation = async () => {\n    if (!selectedProjectId) {\n      alert('プロジェクトを選択してください。');\n      return;\n    }\n    setIsEstimating(true);\n    setProgress(0);\n\n    try {\n      await axios.post('/api/work-estimation', {\n        project_id: selectedProjectId,\n      });\n\n      // 進捗のシミュレーション\n      const estimationInterval = setInterval(() => {\n        setProgress((prevProgress) => {\n          if (prevProgress >= 100) {\n            clearInterval(estimationInterval);\n            // 見積完了後、結果画面へ遷移\n            router.push('/estimation-result');\n            return 100;\n          } else {\n            return prevProgress + 10;\n          }\n        });\n      }, 500);\n    } catch (error) {\n      console.error(error);\n      alert('見積の開始に失敗しました。');\n      setIsEstimating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"max-w-3xl mx-auto py-8\">\n        <img\n          src=\"https://placehold.co/600x200?text=工数見積\"\n          alt=\"工数見積イメージ\"\n          className=\"w-full mb-6 rounded\"\n        />\n        <h1 className=\"text-3xl font-bold mb-6\">工数見積画面</h1>\n        <div className=\"mb-4\">\n          <label className=\"block mb-2\">見積対象プロジェクトを選択してください:</label>\n          <select\n            value={selectedProjectId}\n            onChange={(e) => setSelectedProjectId(e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          >\n            <option value=\"\">-- プロジェクトを選択 --</option>\n            {projects.map((project) => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button\n          onClick={startEstimation}\n          disabled={isEstimating}\n          className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center\"\n        >\n          <FiPlay className=\"mr-2\" />\n          見積開始\n        </button>\n        {isEstimating && (\n          <div className=\"mt-8\">\n            <p>見積進捗: {progress}%</p>\n            <div className=\"w-full bg-gray-300 h-4 rounded\">\n              <div\n                className=\"bg-blue-500 h-4 rounded\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"
        }
      ]
    },
    {
      "component": "資料作成対象選択 テンプレート選択 作成開始ボタン 作成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-creation.tsx",
      "operatingProcedure": "1. 資料作成対象のプロジェクトを選択\n2. 使用するテンプレートを選択\n3. 作成開始ボタンをクリック\n4. 作成進捗をリアルタイムで表示\n5. 作成完了後 提案資料表示画面へ自動遷移",
      "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する画面",
      "id": "SCR-009",
      "screenName": "提案資料作成画面",
      "category": "資料作成",
      "user": "営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "proposal-creation.ts",
          "handleProcedure": "1. データベースからプロジェクト情報と関連ドキュメントを取得\n2. 選択されたテンプレートを読み込み\n3. ドキュメントから重要な情報を抽出\n4. テンプレートに情報を適用し 提案資料を生成\n5. 生成された資料を最適化およびフォーマット\n6. 資料をPDF形式に変換\n7. 生成された資料をデータベースに保存\n8. 資料のURLをクライアントに送信",
          "relatedScreen": "SCR-009",
          "handleName": "提案資料自動作成",
          "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する",
          "id": "BAC-008",
          "category": "資料作成",
          "relatedFrontendCode": "import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport supabase from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport axios from 'axios';\nimport { FaPlay } from 'react-icons/fa';\n\nconst ProposalCreation: React.FC = () => {\n  const [user, setUser] = useState<any>(null);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState('');\n  const [templates] = useState([\n    { id: 'template1', name: 'ビジネス提案テンプレート' },\n    { id: 'template2', name: '技術提案テンプレート' },\n    { id: 'template3', name: 'マーケティング提案テンプレート' },\n  ]);\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const getUser = async () => {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      } else {\n        setUser(user);\n      }\n    };\n    getUser();\n  }, [router]);\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      const { data, error } = await supabase\n        .from('projects')\n        .select('*')\n        .order('created_at', { ascending: false });\n      if (data) {\n        setProjects(data);\n      } else {\n        console.error(error);\n      }\n    };\n    if (user) {\n      fetchProjects();\n    }\n  }, [user]);\n\n  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedProject(e.target.value);\n  };\n\n  const handleTemplateChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedTemplate(e.target.value);\n  };\n\n  const handleStartCreation = async () => {\n    if (!selectedProject || !selectedTemplate) {\n      setError('プロジェクトとテンプレートを選択してください。');\n      return;\n    }\n    setError('');\n    setIsCreating(true);\n    setProgress(0);\n\n    try {\n      await axios.post('/api/proposal-creation', {\n        projectId: selectedProject,\n        templateId: selectedTemplate,\n      });\n\n      const interval = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) {\n            clearInterval(interval);\n            setIsCreating(false);\n            router.push('/proposal-display');\n          }\n          return prev + 10;\n        });\n      }, 500);\n    } catch (err) {\n      setError('作成中にエラーが発生しました。');\n      setIsCreating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        {error && (\n          <div className=\"bg-red-100 text-red-700 p-4 mb-4 rounded\">\n            {error}\n          </div>\n        )}\n        <div className=\"bg-white rounded shadow p-6\">\n          <h1 className=\"text-2xl font-bold mb-4\">提案資料作成</h1>\n          <img\n            src=\"https://placehold.co/600x200?text=提案資料作成\"\n            alt=\"提案資料作成\"\n            className=\"w-full mb-6\"\n          />\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 font-medium mb-2\">\n              プロジェクトを選択\n            </label>\n            <select\n              className=\"w-full border border-gray-300 p-2 rounded\"\n              value={selectedProject}\n              onChange={handleProjectChange}\n            >\n              <option value=\"\">プロジェクトを選択してください</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 font-medium mb-2\">\n              テンプレートを選択\n            </label>\n            <select\n              className=\"w-full border border-gray-300 p-2 rounded\"\n              value={selectedTemplate}\n              onChange={handleTemplateChange}\n            >\n              <option value=\"\">テンプレートを選択してください</option>\n              {templates.map((template) => (\n                <option key={template.id} value={template.id}>\n                  {template.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <button\n            className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center\"\n            onClick={handleStartCreation}\n            disabled={isCreating}\n          >\n            <FaPlay className=\"mr-2\" />\n            作成開始\n          </button>\n          {isCreating && (\n            <div className=\"mt-6\">\n              <label className=\"block text-gray-700 font-medium mb-2\">\n                作成進捗\n              </label>\n              <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                <div\n                  className=\"bg-blue-500 h-4 rounded-full\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-center mt-2\">{progress}%</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProposalCreation;"
        }
      ]
    },
    {
      "component": "レポート対象選択 レポート期間設定 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report.tsx",
      "operatingProcedure": "1. レポート対象のプロジェクトを選択\n2. レポート期間を設定\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 進捗レポート表示画面へ自動遷移",
      "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する画面",
      "id": "SCR-010",
      "screenName": "進捗レポート画面",
      "category": "レポーティング",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "progress-report.ts",
          "handleProcedure": "1. データベースからプロジェクトの全アクティビティログを取得\n2. 指定された期間のデータをフィルタリング\n3. 各フェーズの進捗率を計算\n4. 全体の進捗率を算出\n5. 主要な課題や遅延要因を特定\n6. グラフと表を含むレポートを生成\n7. 生成されたレポートをデータベースに保存\n8. レポートのサマリーと閲覧用URLをクライアントに送信",
          "relatedScreen": "SCR-010",
          "handleName": "進捗レポート生成",
          "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する",
          "id": "BAC-009",
          "category": "レポーティング",
          "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\n\nfunction ProgressReport() {\n  const [session, setSession] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    const getSession = async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      setSession(session);\n\n      if (!session) {\n        router.push('/login');\n      } else {\n        fetchProjects();\n      }\n    };\n\n    getSession();\n  }, []);\n\n  const fetchProjects = async () => {\n    const { data, error } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('created_by', session?.user?.id);\n\n    if (error) {\n      console.log('プロジェクトの取得エラー:', error);\n    } else {\n      setProjects(data || []);\n    }\n  };\n\n  const startGeneration = async () => {\n    if (!selectedProject || !startDate || !endDate) {\n      alert('プロジェクトとレポート期間を選択してください。');\n      return;\n    }\n\n    setIsGenerating(true);\n    setProgress(0);\n\n    try {\n      const response = await axios.post('/api/progress-report', {\n        project_id: selectedProject,\n        start_date: startDate,\n        end_date: endDate,\n      });\n\n      const reportId = response.data.report_id;\n\n      const interval = setInterval(async () => {\n        const progressResponse = await axios.get(\n          `/api/progress-report/${reportId}/progress`\n        );\n\n        setProgress(progressResponse.data.progress);\n\n        if (progressResponse.data.progress >= 100) {\n          clearInterval(interval);\n          setIsGenerating(false);\n          router.push(`/progress-report/${reportId}`);\n        }\n      }, 1000);\n    } catch (error) {\n      console.log('レポート生成のエラー:', error);\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto p-8\">\n        <h1 className=\"text-2xl font-bold mb-4\">進捗レポート生成</h1>\n        <div className=\"bg-white p-6 rounded shadow\">\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 mb-2\">\n              レポート対象プロジェクト\n            </label>\n            <select\n              className=\"w-full border border-gray-300 p-2 rounded\"\n              value={selectedProject}\n              onChange={(e) => setSelectedProject(e.target.value)}\n            >\n              <option value=\"\">プロジェクトを選択してください</option>\n              {projects.map((project: any) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 mb-2\">レポート期間</label>\n            <div className=\"flex space-x-4\">\n              <input\n                type=\"date\"\n                className=\"border border-gray-300 p-2 rounded w-1/2\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n              <input\n                type=\"date\"\n                className=\"border border-gray-300 p-2 rounded w-1/2\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"mb-4\">\n            <button\n              className={`w-full bg-blue-500 text-white p-2 rounded ${\n                isGenerating ? 'opacity-50 cursor-not-allowed' : ''\n              }`}\n              onClick={startGeneration}\n              disabled={isGenerating}\n            >\n              生成開始\n            </button>\n          </div>\n          {isGenerating && (\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700 mb-2\">生成進捗</label>\n              <div className=\"w-full bg-gray-200 rounded h-4\">\n                <div\n                  className=\"bg-blue-500 h-4 rounded\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-right text-gray-600 mt-2\">{progress}%</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressReport;"
        }
      ]
    },
    {
      "component": "ドキュメント表示エリア 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "document-view.tsx",
      "operatingProcedure": "1. 生成されたドキュメントを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてドキュメントをエクスポート",
      "description": "生成された開発ドキュメントを表示する画面",
      "id": "SCR-011",
      "screenName": "ドキュメント表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ソースコード表示エリア シンタックスハイライト 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "code-view.tsx",
      "operatingProcedure": "1. 生成されたソースコードを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてソースコードをエクスポート",
      "description": "生成されたソースコードを表示する画面",
      "id": "SCR-012",
      "screenName": "ソースコード表示画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "チェック結果サマリー 詳細結果リスト 改善提案",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check-result.tsx",
      "operatingProcedure": "1. チェック結果のサマリーを確認\n2. 詳細結果リストで個別の問題点を確認\n3. 改善提案を参考に必要な修正を行う",
      "description": "品質チェックの結果を表示する画面",
      "id": "SCR-013",
      "screenName": "品質チェック結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "整合性スコア 不整合箇所リスト 修正提案",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check-result.tsx",
      "operatingProcedure": "1. 整合性スコアを確認\n2. 不整合箇所リストで具体的な問題点を確認\n3. 修正提案を参考に必要な調整を行う",
      "description": "ドキュメント間の整合性チェック結果を表示する画面",
      "id": "SCR-014",
      "screenName": "整合性確認結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "総工数表示 フェーズ別工数内訳 工数調整オプション",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation-result.tsx",
      "operatingProcedure": "1. 総工数を確認\n2. フェーズ別工数内訳を確認\n3. 必要に応じて工数調整オプションで見積を調整\n4. 調整後の工数をプロジェクト計画に反映",
      "description": "自動生成された工数見積結果を表示する画面",
      "id": "SCR-015",
      "screenName": "工数見積結果画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "提案資料プレビュー 編集ボタン エクスポートボタン",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-view.tsx",
      "operatingProcedure": "1. 生成された提案資料をプレビュー\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. エクスポートボタンをクリックして提案資料をダウンロードまたは印刷",
      "description": "自動生成された提案資料を表示する画面",
      "id": "SCR-016",
      "screenName": "提案資料表示画面",
      "category": "表示",
      "user": "営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "全体進捗グラフ フェーズ別進捗状況 課題リスト",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report-view.tsx",
      "operatingProcedure": "1. 全体進捗グラフで進捗状況を視覚的に確認\n2. フェーズ別進捗状況で詳細を確認\n3. 課題リストで現在の問題点や遅延要因を確認\n4. 必要に応じてプロジェクト計画の調整を検討",
      "description": "自動生成された進捗レポートを表示する画面",
      "id": "SCR-017",
      "screenName": "進捗レポート表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    }
  ]
}
